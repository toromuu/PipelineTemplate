<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.39">
  <actions>
    <org.jenkinsci.plugins.workflow.multibranch.JobPropertyTrackerAction plugin="workflow-multibranch@2.21">
      <jobPropertyDescriptors>
        <string>hudson.model.ParametersDefinitionProperty</string>
        <string>org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty</string>
      </jobPropertyDescriptors>
    </org.jenkinsci.plugins.workflow.multibranch.JobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers>
        <hudson.triggers.SCMTrigger>
          <spec></spec>
          <ignorePostCommitHooks>false</ignorePostCommitHooks>
        </hudson.triggers.SCMTrigger>
      </triggers>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.80">
    <script>#!groovy

environment {
        AWS_ACCESS_KEY_ID     = credentials(&apos;AWS_ACCESS_KEY_ID&apos;)
        AWS_SECRET_ACCESS_KEY = credentials(&apos;AWS_SECRET_ACCESS_KEY&apos;)
        env.AWS_ACCESS_KEY_ID = AWS_ACCESS_KEY_ID
        env.AWS_SECRET_ACCESS_KEY = AWS_SECRET_ACCESS_KEY
}



node { 
    
  stage(&apos;GitSCM&apos;){
      git branch: &apos;deploy&apos;, url: &apos;file:///var/lib/jenkins/repo&apos;
  }

  stage (&apos;UnitTest&apos;) {
        dir(&apos;../pipeline_def/src&apos;) {
           sh &apos;&apos;&apos;#!/bin/bash
            python3 ./manage.py test ./tests
         &apos;&apos;&apos;
        }
  }
  
  stage(&quot;SonarQube analysis&quot;) {
        def scannerHome = tool &quot;sonarqube&quot;
            withSonarQubeEnv(&quot;sonarqube&quot;) {
                sh &quot;&quot;&quot;
                    ${scannerHome}/bin/sonar-scanner \
                        -Dsonar.projectKey=&apos;appworkspace&apos; \
                        -Dsonar.projectName=&apos;appworkspace&apos; \
                        -Dsonar.projectVersion=&apos;1.0.0&apos; \
                        -Dsonar.login=admin \
                        -Dsonar.password=admin \
                        -Dsonar.sources=&apos;src&apos;
                &quot;&quot;&quot;
      }
  }
      

  stage (&apos;Clean&apos;) {
        dir(&apos;../pipeline_def&apos;) {
           sh &apos;&apos;&apos;#!/bin/bash
            if [ -f ./ansible/inventory/inventory.txt ]
            then
              rm -rf ./ansible/inventory/inventory.txt
            fi
         &apos;&apos;&apos;
        }
  }
 
  stage (&apos;Terraform Plan&apos;) {
    withCredentials([string(credentialsId: &apos;AWS_ACCESS_KEY_ID&apos;, variable: &apos;AWS_ACCESS_KEY_ID&apos;), 
                    string(credentialsId: &apos;AWS_SECRET_ACCESS_KEY&apos;, variable: &apos;AWS_SECRET_ACCESS_KEY&apos;)]) {  
        dir(&apos;../pipeline_def/terraform&apos;) {
          sh &apos;terraform init&apos;
          sh &apos;terraform plan -no-color -out=create.tfplan&apos;
        }
    }
    
  }

  stage (&apos;Terraform Apply&apos;) {
    withCredentials([string(credentialsId: &apos;AWS_ACCESS_KEY_ID&apos;, variable: &apos;AWS_ACCESS_KEY_ID&apos;), 
                    string(credentialsId: &apos;AWS_SECRET_ACCESS_KEY&apos;, variable: &apos;AWS_SECRET_ACCESS_KEY&apos;)]) {    
    dir(&apos;../pipeline_def/terraform&apos;) {
      sh &apos;terraform apply -no-color -auto-approve create.tfplan&apos;
    }
    }
  }

  stage (&apos;Deploying AWS&apos;) {
     withCredentials([string(credentialsId: &apos;AWS_ACCESS_KEY_ID&apos;, variable: &apos;AWS_ACCESS_KEY_ID&apos;), 
                    string(credentialsId: &apos;AWS_SECRET_ACCESS_KEY&apos;, variable: &apos;AWS_SECRET_ACCESS_KEY&apos;)]) {      
        dir(&apos;../pipeline_def/terraform&apos;) {
            sh &apos;terraform show&apos;
        }
    }
    sleep 200
  }

  stage (&apos;Ansible&apos;) {
       withCredentials([string(credentialsId: &apos;AWS_ACCESS_KEY_ID&apos;, variable: &apos;AWS_ACCESS_KEY_ID&apos;), 
                    string(credentialsId: &apos;AWS_SECRET_ACCESS_KEY&apos;, variable: &apos;AWS_SECRET_ACCESS_KEY&apos;)]) {    
      dir(&apos;../pipeline_def&apos;) {
        sh &apos;&apos;&apos;#!/bin/bash  
            chmod 400 jenkins.pem
            touch ./ansible/inventory/inventory.txt
            cat ./ansible/inventory/hosts.txt | while read line 
            do
              echo &quot;aws ansible_ssh_user=ubuntu ansible_ssh_private_key_file=jenkins.pem ansible_host=$line&quot; &gt; ./ansible/inventory/inventory.txt   
            done
              export ANSIBLE_HOST_KEY_CHECKING=False
              ansible-playbook ./ansible/playbook/playbook.yml -i ./ansible/inventory/inventory.txt
         &apos;&apos;&apos;
      }
    }  
  }
 

}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>