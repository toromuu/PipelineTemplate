#!groovy

environment {
        AWS_ACCESS_KEY_ID     = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
        env.AWS_ACCESS_KEY_ID = AWS_ACCESS_KEY_ID
        env.AWS_SECRET_ACCESS_KEY = AWS_SECRET_ACCESS_KEY
}



node { 
    
  stage('GitSCM'){
      git branch: 'deploy', url: 'file:///var/lib/jenkins/repo'
  }
  
  stage('Loading Custom Tools') {
        def node = tool name: 'Node 12.16 LTS', type: 'jenkins.plugins.nodejs.tools.NodeJSInstallation'
        env.PATH = "${node}/bin:${env.PATH}"
  }

  stage("SonarQube analysis") {
        def scannerHome = tool "sonarqube"
            withSonarQubeEnv("sonarqube") {
                sh """
                    ${scannerHome}/bin/sonar-scanner \
                        -Dsonar.projectKey='appworkspace' \
                        -Dsonar.projectName='appworkspace' \
                        -Dsonar.projectVersion='1.0.0' \
                        -Dsonar.login=sonar \
                        -Dsonar.password=sonar \
                        -Dsonar.sources='src'
                """
      }
  }
      

  stage ('Clean') {
        dir('../pipeline_def') {
           sh '''#!/bin/bash
            if [ -f inventory.txt ]
            then
              rm -rf inventory.txt
            fi
         '''
        }
  }
 
  stage ('Terraform Plan') {
    withCredentials([string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'), 
                    string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY')]) {  
        dir('../pipeline_def') {
          sh 'terraform init'
          sh 'terraform plan -no-color -out=create.tfplan'
        }
    }
    
  }

  stage ('Terraform Apply') {
    withCredentials([string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'), 
                    string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY')]) {    
    dir('../pipeline_def') {
      sh 'terraform apply -no-color -auto-approve create.tfplan'
    }
    }
  }

  stage ('Deploying AWS') {
     withCredentials([string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'), 
                    string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY')]) {      
        dir('../pipeline_def') {
            sh 'terraform show'
        }
    }
    sleep 200
  }

  stage ('Ansible') {
       withCredentials([string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'), 
                    string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY')]) {    
      dir('../pipeline_def') {
        sh '''#!/bin/bash  
            chmod 400 jenkins.pem
            touch inventory.txt
            cat hosts.txt | while read line 
            do
              echo "aws ansible_ssh_user=ubuntu ansible_ssh_private_key_file=jenkins.pem ansible_host=$line" > inventory.txt   
            done
              ansible-playbook playbook.yml -i inventory.txt
         '''
      }
    }  
  }
 

}